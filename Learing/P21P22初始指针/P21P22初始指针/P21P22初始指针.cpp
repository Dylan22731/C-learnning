#include <stdio.h>
int main()
{
    int a = 10;
    int b = 20;
    int c = 30;
    int* arr[] = { &a,&b,&c };
    printf("%d", *(&a) );
}

/*
指针是什么?
在计算机科学中，指针(Pointer）是编程语言中的一个对象,利用地址，它的值直接指向( points to)存在电脑存储器中另一个地方的值。
由于通过地址能找到所需的变量单元,可以说，地址指向该变量单元。因此,将地址形象化的称为“指针"。意思是通过它能找到以它为地址的内存单元。
内存被划分成很多个格子，每个格子对应一个编号，这个编号就是地址。

总结:指针就是变量，用来存放地址的变量。(存放在指针中的值都被当成地址处理)。

一个小的单元到底是多大?（1个字节)

对于32位的机器，假设有32根地址线,那么假设每根地址线在寻址的是产生一个电信号正电/负电( 1或者0）。所以地址有2的32次方个。
同理64位机器，地址有2的64次方个。

在32位的机器上，地址是32个0或者1组成二进制序列，那地址就得用4个字节（32比特位）的空间来存储，所以一个指针变量的大小就应该是4个字节。
那如果在64位机器上，如果有64个地址线，那一个指针变量的大小是8（64比特位）个字节，才能存放一个地址。

总结:
指针是用来存放地址的，地址是唯一标示一块地址空间的。
指针的大小在32位平台是4个字节，在64位平台是8个字节。

指针和指针类型
这里可以看到，指针的定义方式是:type + *。其实:
char*类型的指针是为了存放char类型变量的地址。
short*类型的指针是为了存放short类型变量的地址。
int*类型的指针是为了存放int类型变量的地址。
意义：
1.指针类型决定了指针进行解引用操作时，能够访问的空间的大小。例如：int* p  *p能访问四个字节  char*p *p能访问1个字节 
2.指针类型决定了:指针走一步走多远（指针的步长)int*p;p+1-->4  char*p; p+1-->1 double* p;p+1->8 因为指针认为自己访问的空间不同，当+1往下走一步的时候，就是相应的空间大小。


野指针
概念:野指针就是指针指向的位置是不可知的(随机的、不正确的、没有明确限制的)
例如：
1.int* p//指针未初始化，指针为随机值，所指向的空间是随机的
2.指针越界访问，也会导致野指针。例如数组中循环p++，一直往后走超过数组的所开辟空间，就会越界访问，此时p为野指针
3.指针指向的空间被释放。此时指正所指向的空间是被释放的，当前编译器所提出来的空间是不一样的。

如何规避野指针
1.指针初始化
2.小心指针越界
3.指针指向空间释放,我们可以使指针=NULL
4.指针使用之前检查有效性

给指针赋空值
int* p = NULL;或者 p=NULL


指针运算

1.指针+-整数
p++  p+=2

2.指针-指针=元素之间的个数差
#include <stdio.h>
int main()
{
    int arr[10] = { 1,2,3,4,5,6,7,8,9 };
    printf("%d", &arr[8] - &arr[2]);
}
结果为6
12综合例题，写一个利用指针来计算字符长度的程序
#include <stdio.h>

int point_strlen(char* str)
{
    char* start = str;
    char* end = str;
    while (*end != '\0')
    {
        end++;
    }
    return end - start;
}
int main()
{
    char arr[] = "buyuanhuozhexinquesiqu";
    int len = point_strlen(arr);
    printf("%d", len);
}

3.指针的关系运算
for(vp = &values[N_VALUES]; vp > &values[0];)
{
    *--vp = 0;
}
C标准：允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较。


指针和数组
数组是可以通过指针来访问的

#include <stdio.h>
int main()
{
    int arr[] = {1,2,3,4,5,6,7,8,9,0};
    int *p = arr; //指针存放数组首元素的地址
    int sz = sizeof(arr)/sizeof(arr[0]);
    for(i=0; i<sz; i++)
   {
        printf("&arr[%d] = %p   <====> p+%d = %p\n", i, &arr[i], i, p+i);
   }
    return 0;
}

二级指针：用来存放一级指针变量地址的指针
例如：
int a =10；
int* pa=&a;//一级指针
int** ppa =&pa//二级指针
int*** pppa =&ppa//三级指针


指针数组:本质是存放指针变量的数组
#include <stdio.h>
int main()
{
    int a = 10;
    int b = 20;
    int c = 30;
    int* arr[] = { &a,&b,&c };
    printf("%d", *(&a) );
}
























































































































































*/